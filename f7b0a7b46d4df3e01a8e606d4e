// Array.prototype.equals = function ($217373) {
//     // if the other array is a falsy value, return
//     if (!$217373)
//         return false;

//     // compare lengths - can save a lot of time 
//     if (this.length !== $217373.length)
//         return false;

//     for (var $43=0,$53=this.length; $43<$53;$43++) {
//         // Check if we have nested arrays
//         if (this[$43] instanceof Array && $217373[$43] instanceof Array) {
//             // recurse into the nested arrays
//             if (!this[$43].equals($217373[$43]))
//                 return false;
//         }
//             // REQUIRES OBJECT COMPARE //
//         else if (this[$43] instanceof Object && $217373[$43] instanceof Object) {
//             // recurse into another objects
//             //console.log("Recursing to compare ", this[propName],"with",object2[propName], " both named \""+propName+"\"");
//             if (!this[$43].equals($217373[$43]))
//                 return false;
//         }
//         else if (this[$43] !== $217373[$43]) {
//             // Warning - two different object instances will never be equal: {x:20} != {x:20}
//             return false;
//         }
//     }
//     return true;
// }
// Object.prototype.equals = function ($632251) {
//     //For the first loop, we only check for types
//     for ($7162216132 in this) {
//         //Check for inherited methods and properties - like .equals itself
//         //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty
//         //Return false if the return value is different
//         if (this.hasOwnProperty($7162216132) !== $632251.hasOwnProperty($7162216132)) {
//             return false;
//         }
//             //Check instance type
//         else if (typeof this[$7162216132] !== typeof $632251[$7162216132]) {
//             //Different types => not equal
//             return false;
//         }
//     }
//     //Now a deeper check using other objects property names
//     for ($7162216132 in $632251) {
//         //We must check instances anyway, there may be a property that only exists in $632251
//         //I wonder, if remembering the checked values from the first loop would be faster or not 
//         if (this.hasOwnProperty($7162216132) !== $632251.hasOwnProperty($7162216132)) {
//             return false;
//         }
//         else if (typeof this[$7162216132] !== typeof $632251[$7162216132]) {
//             return false;
//         }
//         //If the property is inherited, do not check any more (it must be equa if both objects inherit it)
//         if (!this.hasOwnProperty($7162216132)) {
//             continue;
//         }

//         //Now the detail check and recursion

//         //This returns the script back to the array comparing
//         //REQUIRES Array.equals//
//         if (this[$7162216132] instanceof Array && $632251[$7162216132] instanceof Array) {
//             // recurse into the nested arrays
//             if (!this[$7162216132].equals($632251[$7162216132]))
//                 return false;
//         }
//         else if (this[$7162216132] instanceof Object && $632251[$7162216132] instanceof Object) {
//             // recurse into another objects
//             //console.log("Recursing to compare ", this[$7162216132],"with",$632251[$7162216132], " both named \""+propName+"\"");
//             if (!this[$7162216132].equals($632251[$7162216132]))
//                 return false;
//         }
//             //Normal value comparison for strings and numbers
//         else if (this[$7162216132] !== $632251[$7162216132]) {
//             return false;
//         }
//     }
//     //If everything passed, let's say YES
//     return true;
// }
// String.prototype.endWiths = function($1) {
//     return this.indexOf($1, this.length - $1.length) !== -1;
// }
function $23636171217332632251($1, $2, $3) {
	if((typeof $1 === 'undefined') || (typeof $2 === 'undefined')) return false;
	// console.log("dong 1: " + $3);
	if(typeof $1 !== typeof $2) return false;
	// console.log("dong 2: " + $3);
	if(($1 instanceof Object) && ($2 instanceof Object)) {
		// console.log("dong 3: " + $3);
		var j=0;
		for($6 in $1) {
			// console.log("dong 4" + j + ": " + $6 + "-" + $3);
			if(!$2.hasOwnProperty($6)) return false;
			// console.log("dong 5" + j + ": " + $6 + "-" + $3);
			if(typeof $1[$6] !== typeof $2[$6]) return false;
			// console.log("dong 6" + j + ": " + $6 + "-" + $3);
			if((typeof $1[$6] === 'string') && (typeof $2[$6] === 'string')) {
				// console.log("dong 7" + j + ": " + $6 + "-" + $3);
				if($1[$6]!==$2[$6]) return false;
			} else if(!($1[$6] instanceof Object) || !($2[$6] instanceof Object)) {
				// console.log("dong 8" + j + ": " + $6 + "-" + $3);
				return false;
			} else if(!$23636171217332632251($1[$6],$2[$6],$3+1)) {
				// console.log("dong 9" + j + ": " + $6 + "-" + $3);
				return false;
			}
			j++;
		}
	}
	// console.log("dong xx: " + $3);
	return true;
}
function $7432818271232162832174($32) {
	var $31 = $32.getContext("2d");
	$32.height = 1000;
	$32.width = 1000;
	// $31.globalAlpha = 0.1;
	var $33 = ['#fffafa', '#fafffa', '#fafaff', '#fffffa', '#fefefe', '#faffff', '#fffaff', '#fafafa','#fffafa','#fafaff','#fafafa'];
	for(var i=0;i<1000;i+=200) {
		for(var j=0;j<1000;j+=200) {
			var $34 = Math.floor((Math.random() * 10) + 1);
			$31.fillStyle = $33[$34];
			$31.fillRect(i,j,200,200);
			$31.beginPath();
			$31.strokeStyle="#ffffff";
			$31.lineWidth="5";
			$31.rect(i,j,200,200); 
			$31.stroke();
		}
	}
}
function $743281827123216283217442329221416362($833242436242216242) {
	// 504, 291
	// 97,168,194
	// 48.5,84,97
	var a = 48.5, b = 84, c = 97;
	var x = 0, y = 48.5;
	$833242436242216242.width = 504;
	$833242436242216242.height = 291;
	var ctx = $833242436242216242.getContext("2d");
	function $83324243624253822353216241(ctx,x,y,mau,a,b,c) {
		ctx.beginPath();
		ctx.moveTo(x, y);
		ctx.lineTo(x, y+c);
		ctx.lineTo(x+b, y+c+a);
		ctx.lineTo(x+b+b, y+c);
		ctx.lineTo(x+b+b, y);
		ctx.lineTo(x+b, y-a);
		ctx.closePath();
		ctx.strokeStyle="#ffffff";
		ctx.lineWidth=3;
		ctx.stroke();
		ctx.fillStyle=mau;
		ctx.fill();
		ctx.moveTo(x+b, y+a);
		ctx.lineTo(x, y+c);
		ctx.moveTo(x+b, y+a);
		ctx.lineTo(x+b+b, y+c);
		ctx.moveTo(x+b, y+a);
		ctx.lineTo(x+b, y-a);
		ctx.strokeStyle="#fefefe";
		ctx.lineWidth=1;
		ctx.stroke();
	}

	$83324243624253822353216241(ctx,2*b*0-b,48.5-c-y,"#ffe6ff",48.5,84,97);
	$83324243624253822353216241(ctx,2*b*1-b,48.5-c-y,"#e6ffff",48.5,84,97);
	$83324243624253822353216241(ctx,2*b*2-b,48.5-c-y,"#ffffe6",48.5,84,97);
	$83324243624253822353216241(ctx,2*b*3-b,48.5-c-y,"#ffe6ff",48.5,84,97);
	$83324243624253822353216241(ctx,2*b*0,48.5,"#ffe6e6",48.5,84,97);
	$83324243624253822353216241(ctx,2*b*1,48.5,"#e6ffe6",48.5,84,97);
	$83324243624253822353216241(ctx,2*b*2,48.5,"#e6e6ff",48.5,84,97);
	$83324243624253822353216241(ctx,2*b*0-b,48.5+c+y,"#ffe6ff",48.5,84,97);
	$83324243624253822353216241(ctx,2*b*1-b,48.5+c+y,"#e6ffff",48.5,84,97);
	$83324243624253822353216241(ctx,2*b*2-b,48.5+c+y,"#ffffe6",48.5,84,97);
	$83324243624253822353216241(ctx,2*b*3-b,48.5+c+y,"#ffe6ff",48.5,84,97);
}
function $743281827142329221416362($32) {

	var hexHeight,
		hexRadius,
		hexRectangleHeight,
		hexRectangleWidth,
		hexagonAngle = 0.523598776, // 30 degrees in radians
		sideLength = 36,
		boardWidth = 10,
		boardHeight = 10;

	hexHeight = Math.sin(hexagonAngle) * sideLength;
	hexRadius = Math.cos(hexagonAngle) * sideLength;
	hexRectangleHeight = sideLength + 2 * hexHeight;
	hexRectangleWidth = 2 * hexRadius;

	$32.width = 660;
	$32.height = 624;

	if ($32.getContext){
		var ctx = $32.getContext('2d');

		drawBoard(ctx, boardWidth, boardHeight);

		// canvas.addEventListener("mousemove", function(eventInfo) {
		// 	var x,
		// 		y,
		// 		hexX,
		// 		hexY,
		// 		screenX,
		// 		screenY;

		// 	x = eventInfo.offsetX || eventInfo.layerX;
		// 	y = eventInfo.offsetY || eventInfo.layerY;

			
		// 	hexY = Math.floor(y / (hexHeight + sideLength));
		// 	hexX = Math.floor((x - (hexY % 2) * hexRadius) / hexRectangleWidth);

		// 	screenX = hexX * hexRectangleWidth + ((hexY % 2) * hexRadius);
		// 	screenY = hexY * (hexHeight + sideLength);

		// 	ctx.clearRect(0, 0, canvas.width, canvas.height);

		// 	drawBoard(ctx, boardWidth, boardHeight);

		// 	// Check if the mouse's coords are on the board
		// 	if(hexX >= 0 && hexX < boardWidth) {
		// 		if(hexY >= 0 && hexY < boardHeight) {
		// 			ctx.fillStyle = "#000000";
		// 			drawHexagon(ctx, screenX, screenY, true);
		// 		}
		// 	}
		// });
	}

	function drawBoard(canvasContext, width, height) {
		var i,j;
		var $33 = ['#fffafa', '#fafffa', '#fafaff', '#fffffa', '#fefefe', '#faffff', '#fffaff', '#fafafa','#fffafa','#fafaff','#fafafa'];
		for(i = 0; i < width; ++i) {
			for(j = 0; j < height; ++j) {
				var $34 = Math.floor((Math.random() * 10) + 1);
				ctx.fillStyle = $33[$34];
				ctx.strokeStyle = "#ffffff";
				ctx.lineWidth = 5;
				drawHexagon(
					ctx, 
					i * hexRectangleWidth + ((j % 2) * hexRadius), 
					j * (sideLength + hexHeight), 
					false
				);
			}
		}
	}

	function drawHexagon(canvasContext, x, y, fill) {           
		canvasContext.beginPath();
		canvasContext.moveTo(x + hexRadius, y);
		canvasContext.lineTo(x + hexRectangleWidth, y + hexHeight);
		canvasContext.lineTo(x + hexRectangleWidth, y + hexHeight + sideLength);
		canvasContext.lineTo(x + hexRadius, y + hexRectangleHeight);
		canvasContext.lineTo(x, y + sideLength + hexHeight);
		canvasContext.lineTo(x, y + hexHeight);
		canvasContext.closePath();
		canvasContext.fill();
		canvasContext.stroke();
	}
}